import {HttpError} from "./HttpError";

export enum HTTP_ERROR {
  ACCESS_DENIED = 403,
  NOT_FOUND = 404,
  TIME_OUT = 402,
  BAD_REQUEST = 400,
  NOT_AUTHENTICATE = 401,
  INTERNAL_SERVER_ERROR = 500
}

interface FieldError {
  name: string
  code: string
  message: string
}

export const FIELD_ERROR = {
  INVALID: 'INVALID',
  EMAIL_NOT_ACTIVE: 'EMAIL_NOT_ACTIVE',
  USER_NOT_ACTIVE: 'USER_NOT_ACTIVE',
  WRONG_PASSWORD: 'WRONG_PASSWORD',
  USER_NOT_FOUND: 'USER_NOT_FOUND',
  EMAIL_INVALID: 'EMAIL_INVALID',
  EMAIL_NOT_ALLOW_REGISTER: 'EMAIL_NOT_ALLOW_REGISTER',
  INVALID_TOKEN: 'INVALID_TOKEN',
  EMAIL_NOT_FOUND: 'EMAIL_NOT_FOUND',
  EMAIL_EXISTED: 'EMAIL_EXISTED',
  TOKEN_EXPIRED: 'TOKEN_EXPIRED',
  PASSWORD_NOT_MATCH: 'PASSWORD_NOT_MATCH',
  SIGNED_URL_FAILED: 'SIGNED_URL_FAILED',
  UPLOAD_FAILED: 'UPLOAD_FAILED',
  USER_NAME_IS_EXITED: 'USER_NAME_IS_EXITED',
  CURRENT_PASSWORD_NOT_MATCH: 'CURRENT_PASSWORD_NOT_MATCH',
  CURRENT_EMAIL_NOT_MATCH: 'CURRENT_EMAIL_NOT_MATCH',
  CONFIRM_EMAIL_NOT_MATCH: 'CONFIRM_EMAIL_NOT_MATCH',
  NEW_EMAIL_SAME_OLD_EMAIL: 'NEW_EMAIL_SAME_OLD_EMAIL',
  USERNAME_IS_A_REQUIRED_FIELD: 'USERNAME_IS_A_REQUIRED_FIELD',
  USER_NOT_ACTIVE_KYC: 'USER_NOT_ACTIVE_KYC',
  EXISTED: 'EXISTED',
  COMPANY_IS_NOT_ACTIVE: 'COMPANY_IS_NOT_ACTIVE',
  BAD_REQUEST: 'BAD_REQUEST',
  NOT_AUTHENTICATE: 'NOT_AUTHENTICATE',
  FORBIDDEN_ERROR: 'FORBIDDEN_ERROR',
  RESOURCE_NOT_FOUND: 'RESOURCE_NOT_FOUND',
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
  LOGIN_REQUIRED_OTP: 'LOGIN_REQUIRED_OTP',
  API_KEY_NOT_FOUND: 'API_KEY_NOT_FOUND'
};


export class FormError extends HttpError {
  errors: Array<FieldError>

  constructor(_errors: FieldError | Array<FieldError>) {
    super(HTTP_ERROR.BAD_REQUEST, 'Bad request');
    this.errors = Array.isArray(_errors) ? [..._errors] : [_errors];
  }
}

export function badRequest(name: string, code: string, message: string) {
  return new FormError({name, code, message});
}
